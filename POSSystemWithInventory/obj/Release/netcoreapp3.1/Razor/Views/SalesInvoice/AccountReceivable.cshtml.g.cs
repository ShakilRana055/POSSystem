#pragma checksum "G:\ProjectPOS\POSSystemWithInventory\POSSystemWithInventory\Views\SalesInvoice\AccountReceivable.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "f3eca53981943bde6457bc4484141519d39a9fa9"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_SalesInvoice_AccountReceivable), @"mvc.1.0.view", @"/Views/SalesInvoice/AccountReceivable.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "G:\ProjectPOS\POSSystemWithInventory\POSSystemWithInventory\Views\_ViewImports.cshtml"
using POSSystemWithInventory;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "G:\ProjectPOS\POSSystemWithInventory\POSSystemWithInventory\Views\_ViewImports.cshtml"
using POSSystemWithInventory.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"f3eca53981943bde6457bc4484141519d39a9fa9", @"/Views/SalesInvoice/AccountReceivable.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"0954828e5840935f343bc924c396ef2b26707336", @"/Views/_ViewImports.cshtml")]
    public class Views_SalesInvoice_AccountReceivable : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<POSSystemWithInventory.Models.SalesInvoiceVM>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("class", new global::Microsoft.AspNetCore.Html.HtmlString("form-control select2"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("id", new global::Microsoft.AspNetCore.Html.HtmlString("brandCreateForm"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("enctype", new global::Microsoft.AspNetCore.Html.HtmlString("multipart/form-data"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.SelectTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 2 "G:\ProjectPOS\POSSystemWithInventory\POSSystemWithInventory\Views\SalesInvoice\AccountReceivable.cshtml"
  
    ViewData["Title"] = "Account Receivable";
    Layout = "~/Views/Shared/_POSLayout.cshtml";

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n<style>\r\n    .odd {\r\n        background-color: #b3ffff;\r\n    }\r\n\r\n    .even {\r\n        background-color: #b3b3ff;\r\n    }\r\n</style>\r\n<div class=\"row\">\r\n    <div class=\"col-md-12\">\r\n        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "f3eca53981943bde6457bc4484141519d39a9fa95094", async() => {
                WriteLiteral(@"
            <div class=""card"">
                <div id=""headingOne"" class=""card-header bg-blue1"">
                    <button type=""button"" data-toggle=""collapse"" data-target=""#Collapse"" aria-expanded=""true"" class=""text-left m-0 p-0 btn btn-block"" style=""box-shadow: none;"">
                        <h5 class=""m-0 p-0"" style=""color: #fff;"">Accounts Receivable</h5>
                    </button>
                </div>
                <div class=""card-body"">
                    <div id=""Collapse"" class=""collapse show"">
                        <div class=""row"">
                            <div class=""col-md-1""></div>
                            <div class=""col-md-10"">
                                <div class=""input-group"">
                                    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("select", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "f3eca53981943bde6457bc4484141519d39a9fa96164", async() => {
                    WriteLiteral("\r\n                                    ");
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.SelectTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
#nullable restore
#line 31 "G:\ProjectPOS\POSSystemWithInventory\POSSystemWithInventory\Views\SalesInvoice\AccountReceivable.cshtml"
__Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper.Items = Model.CustomerItem;

#line default
#line hidden
#nullable disable
                __tagHelperExecutionContext.AddTagHelperAttribute("asp-items", __Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper.Items, global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
#nullable restore
#line 31 "G:\ProjectPOS\POSSystemWithInventory\POSSystemWithInventory\Views\SalesInvoice\AccountReceivable.cshtml"
__Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper.For = ModelExpressionProvider.CreateModelExpression(ViewData, __model => __model.CustomerId);

#line default
#line hidden
#nullable disable
                __tagHelperExecutionContext.AddTagHelperAttribute("asp-for", __Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper.For, global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral(@"
                                    <div class=""input-group-append"">
                                        <button class=""btn btn-success btn-sm"" id=""search"" tittle=""Search"" type=""button""><i class=""fa fa-search""></i>Search</button>
                                    </div>
                                </div>
                            </div>
                            <div class=""col-md-1""></div>
                        </div>
                        <div class=""row"" id=""overAllInformation"" style=""display:none;"">
                            <div class=""col-md-12"">
                                <h3 style=""text-align:center;"">Customer Information</h3>
                                <table class=""table table-borderless"">
                                    <tbody id=""customerInformation"">
                                    </tbody>
                                </table>
                            </div>
                            <div class=""col-md-12"">
                         ");
                WriteLiteral(@"       <h3 style=""text-align:center;"">Account Dues</h3>
                                <table class=""table table-bordered table-hover"">
                                    <thead>
                                        <tr style=""text-align:center; background-color:coral;"">
                                            <th>Invoice No.</th>
                                            <th>Grand Total</th>
                                            <th>Paid Amount</th>
                                            <th>Dues</th>
                                            <th>Date</th>
                                            <th></th>
                                        </tr>
                                    </thead>
                                    <tbody id=""duesInformation"">
                                    </tbody>
                                    <tfoot>
                                        <tr style=""background-color: coral;"">
                                           ");
                WriteLiteral(@" <td colspan=""3"" style=""text-align:right;"">Total</td>
                                            <td style=""text-align:center;"" id=""totalDues""></td>
                                            <td style=""text-align:center;""></td>
                                            <td style=""text-align:center;""></td>
                                        </tr>
                                    </tfoot>
                                </table>
                            </div>
                            <div class=""col-md-9""></div>
                            <div class=""col-md-3"">
                                <button type=""button"" class=""btn btn-secondary pull-right"" id=""payDues"">Pay</button>
                            </div>

                        </div>
                    </div>
                </div>
            </div>
        ");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n    </div>\r\n</div>\r\n\r\n");
            DefineSection("Scripts", async() => {
                WriteLiteral(@"
    <script>
        (function () {
            let ajaxOperation = new AjaxOperation();
            let selector = {
                customerId: $(""#CustomerId""),
                overAllInformation: $(""#overAllInformation""),
                customerInformation: $(""#customerInformation""),
                duesInformation: $(""#duesInformation""),
                search: $(""#search""),
                payDues: $(""#payDues""),
                totalDues: $(""#totalDues""),
                increment: 1,
                duesInfo: "".duesInfo"",
            };
            class SalesInvoiceDetail {
                constructor(invoiceNumber, dues) {
                    this.invoiceNumber = invoiceNumber;
                    this.dues = dues;
                }
            }
            class Process {
                CustomerInformation(customer) {
                    let data = `
                            <tr>
                                <td style=""text-align:right;"">Name :</td>
             ");
                WriteLiteral(@"                   <td style=""text-align:left;"">${customer.name}</td>
                                <td style=""width:20% !important;""></td>
                                <td style=""text-align:center;"" rowspan=""2"">
                                    <img src = ""${customer.photoUrl}"" width = ""100"" height = ""100"" alt = ""No Image"">
                                </td>
                            </tr>
                            <tr>
                                <td style=""text-align:right;"">Phone :</td>
                                <td style=""text-align:left;"">${customer.phone}</td>
                                <td style=""width:20% !important;""></td>
                            </tr>
                            <tr>
                                <td style=""text-align:right;"">Email :</td>
                                <td style=""text-align:left;"">${customer.email}</td>
                                <td style=""width:20% !important;text-align:right;"">Designation :</td>
          ");
                WriteLiteral(@"                      <td style=""text-align:left;"">${customer.designation}</td>
                            </tr>`;
                    selector.customerInformation.html(data);
                }
                GetCustomerInformation(customerId) {
                    let customerInformation = ajaxOperation.GetAjaxByValue(""/User/CustomerInformationById"", customerId);
                    this.CustomerInformation(customerInformation);
                }
                BuildDues(invoiceNumber, grandTotal, paidAmount, dues, date) {
                    let data = `<tr style = ""text-align:center;"" class = ${selector.increment % 2 == 0 ? ""even"" : ""odd""}>
                                <td>${invoiceNumber}</td>
                                <td>${grandTotal}</td>
                                <td>${paidAmount}</td>
                                <td>${dues}</td>
                                <td>${date}</td>
                                <td>
                                    <input type=""c");
                WriteLiteral(@"heckbox"" class=""duesInfo"" invoiceNumber=""${invoiceNumber}"" dues=""${dues}"" checked=""checked"" />
                                </td>
                            </tr>`;
                    selector.increment++;
                    return data;
                }
                GetAllDues(customerId) {
                    let duesList = ajaxOperation.GetAjaxByValue(""/SalesInvoice/GetDuesByCustomer"", customerId);
                    console.log(duesList);
                    let data = """";
                    for (let i = 0; i < duesList.length; i ++) {
                        let invoiceNumber = duesList[i].invoiceNumber;
                        let grandTotal = duesList[i].grandTotal;
                        let paidAmount = duesList[i].paidAmount;
                        let supplierDues = duesList[i].dues;
                        let date = duesList[i].createdDate;
                        data += this.BuildDues(invoiceNumber, grandTotal.toFixed(2), paidAmount.toFixed(2), supplierDues.toFixed");
                WriteLiteral(@"(2), date);
                    }
                    selector.duesInformation.html(data);
                    selector.totalDues.text(this.CalculateSum(selector.duesInfo));
                }
                CalculateSum(className) {
                    let summation = 0;
                    $(className).each(function () {
                        if ($(this).is("":checked"")) {
                            summation += Number($(this).attr(""dues""));
                        }
                    });
                    return summation.toFixed(2);
                }
                MakeJson(className) {
                    let jsonData = [];
                    $(className).each(function () {
                        if ($(this).is("":checked"")) {
                            let invoiceNumber = $(this).attr(""invoiceNumber"");
                            let dues = $(this).attr(""dues"");
                            let obj = new SalesInvoiceDetail(invoiceNumber, dues);
                            js");
                WriteLiteral(@"onData.push(obj);
                        }
                    });
                    let data = {
                        SalesInvoiceDetails: jsonData,
                    }
                    return data;
                }
            }
            let process = new Process();
            selector.search.click(function () {

                let customerId = selector.customerId.val();
                process.GetCustomerInformation(customerId);

                process.GetAllDues(customerId);
                selector.overAllInformation.show();
            });

            $(document).on(""change"", selector.duesInfo, function () {
                let sum = process.CalculateSum(selector.duesInfo);
                selector.totalDues.text(sum);
            });

            selector.payDues.click(function () {
                let jsonData = process.MakeJson(selector.duesInfo);
                if (jsonData.SalesInvoiceDetails.length > 0) {
                    let response = ajaxOperati");
                WriteLiteral(@"on.SavePostAjax(""/SalesInvoice/AccountReceivable"", jsonData);
                    if (response === true) {
                        toastr.success(""Payment Received!"", ""Success"");
                        selector.overAllInformation.hide();
                    }
                    else {
                        toastr.error(""Something went wrong!"", ""Error"");
                    }
                }
                else {
                    toastr.error(""No dues!"", ""Error"");
                }
            })
        })();
    </script>
");
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<POSSystemWithInventory.Models.SalesInvoiceVM> Html { get; private set; }
    }
}
#pragma warning restore 1591
