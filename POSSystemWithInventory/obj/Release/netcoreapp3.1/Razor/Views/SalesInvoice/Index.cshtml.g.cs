#pragma checksum "G:\Core\POSSystemWithInventory\POSSystemWithInventory\Views\SalesInvoice\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "e7b942cab089ae913cd54c73dd589a95c7241465"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_SalesInvoice_Index), @"mvc.1.0.view", @"/Views/SalesInvoice/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "G:\Core\POSSystemWithInventory\POSSystemWithInventory\Views\_ViewImports.cshtml"
using POSSystemWithInventory;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "G:\Core\POSSystemWithInventory\POSSystemWithInventory\Views\_ViewImports.cshtml"
using POSSystemWithInventory.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "G:\Core\POSSystemWithInventory\POSSystemWithInventory\Views\_ViewImports.cshtml"
using Microsoft.AspNetCore.Identity;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "G:\Core\POSSystemWithInventory\POSSystemWithInventory\Views\_ViewImports.cshtml"
using POSSystemWithInventory.EntityModel;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"e7b942cab089ae913cd54c73dd589a95c7241465", @"/Views/SalesInvoice/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"64b6b5139d3f04192678769d821201b7c793563f", @"/Views/_ViewImports.cshtml")]
    public class Views_SalesInvoice_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<POSSystemWithInventory.Models.SalesInvoiceVM>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("class", new global::Microsoft.AspNetCore.Html.HtmlString("control-label"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("class", new global::Microsoft.AspNetCore.Html.HtmlString("form-control select2"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("class", new global::Microsoft.AspNetCore.Html.HtmlString("text-danger"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("class", new global::Microsoft.AspNetCore.Html.HtmlString("form-control"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_4 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "Cash", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_5 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "Card", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_6 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "Mobile Banking", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_7 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("id", new global::Microsoft.AspNetCore.Html.HtmlString("salesInvoiceCreateForm"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_8 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("enctype", new global::Microsoft.AspNetCore.Html.HtmlString("multipart/form-data"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.LabelTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_LabelTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.SelectTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.ValidationMessageTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_ValidationMessageTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 2 "G:\Core\POSSystemWithInventory\POSSystemWithInventory\Views\SalesInvoice\Index.cshtml"
  
    ViewData["Title"] = "Sales Invoice";
    Layout = "~/Views/Shared/_POSLayout.cshtml";

#line default
#line hidden
#nullable disable
            WriteLiteral(@"
<style>

    #salesInvoiceTable tbody, tr:nth-child(2n+1) {
        background-color: #ccffcc;
    }

    #salesInvoiceTable tbody, tr:nth-child(2n+2) {
        background-color: #e6ccff;
    }

    .rightAlign {
        text-align: right;
    }

    .redColor {
        border-color: red;
    }
</style>

<div class=""row"">
    <div class=""col-md-12"">
        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e7b942cab089ae913cd54c73dd589a95c72414657935", async() => {
                WriteLiteral(@"
            <div class=""card"">
                <div id=""headingOne"" class=""card-header bg-blue1"">
                    <button type=""button"" data-toggle=""collapse"" data-target=""#Collapse"" aria-expanded=""true"" class=""text-left m-0 p-0 btn btn-block"" style=""box-shadow: none;"">
                        <h5 class=""m-0 p-0"" style=""color: #fff;"">Add Sales</h5>
                    </button>
                </div>
                <div class=""card-body"">
                    <div id=""Collapse"" class=""collapse show"">
                        <h3 style=""text-align:center;"">Invoice No.# <span id=""invoiceNumber""></span></h3>
                        <h5 style=""text-align:center;"">Date: ");
#nullable restore
#line 38 "G:\Core\POSSystemWithInventory\POSSystemWithInventory\Views\SalesInvoice\Index.cshtml"
                                                        Write(DateTime.Now.ToString("dd MMM yyyy"));

#line default
#line hidden
#nullable disable
                WriteLiteral("</h5>\r\n                        <div class=\"row\">\r\n                            <div class=\"col-md-4\">\r\n                                <div class=\"form-group\">\r\n                                    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("label", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e7b942cab089ae913cd54c73dd589a95c72414659426", async() => {
                    WriteLiteral("Customer Name");
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_LabelTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.LabelTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_LabelTagHelper);
#nullable restore
#line 42 "G:\Core\POSSystemWithInventory\POSSystemWithInventory\Views\SalesInvoice\Index.cshtml"
__Microsoft_AspNetCore_Mvc_TagHelpers_LabelTagHelper.For = ModelExpressionProvider.CreateModelExpression(ViewData, __model => __model.CustomerId);

#line default
#line hidden
#nullable disable
                __tagHelperExecutionContext.AddTagHelperAttribute("asp-for", __Microsoft_AspNetCore_Mvc_TagHelpers_LabelTagHelper.For, global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n                                    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("select", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e7b942cab089ae913cd54c73dd589a95c724146511102", async() => {
                    WriteLiteral("\r\n                                        \r\n                                    ");
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.SelectTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper);
#nullable restore
#line 43 "G:\Core\POSSystemWithInventory\POSSystemWithInventory\Views\SalesInvoice\Index.cshtml"
__Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper.For = ModelExpressionProvider.CreateModelExpression(ViewData, __model => __model.CustomerId);

#line default
#line hidden
#nullable disable
                __tagHelperExecutionContext.AddTagHelperAttribute("asp-for", __Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper.For, global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
#nullable restore
#line 43 "G:\Core\POSSystemWithInventory\POSSystemWithInventory\Views\SalesInvoice\Index.cshtml"
__Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper.Items = Model.CustomerItem;

#line default
#line hidden
#nullable disable
                __tagHelperExecutionContext.AddTagHelperAttribute("asp-items", __Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper.Items, global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n                                    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("span", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e7b942cab089ae913cd54c73dd589a95c724146513332", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_ValidationMessageTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.ValidationMessageTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_ValidationMessageTagHelper);
#nullable restore
#line 46 "G:\Core\POSSystemWithInventory\POSSystemWithInventory\Views\SalesInvoice\Index.cshtml"
__Microsoft_AspNetCore_Mvc_TagHelpers_ValidationMessageTagHelper.For = ModelExpressionProvider.CreateModelExpression(ViewData, __model => __model.CustomerId);

#line default
#line hidden
#nullable disable
                __tagHelperExecutionContext.AddTagHelperAttribute("asp-validation-for", __Microsoft_AspNetCore_Mvc_TagHelpers_ValidationMessageTagHelper.For, global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n                                </div>\r\n                            </div>\r\n                            <div class=\"col-md-4\">\r\n                                <div class=\"form-group\">\r\n                                    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("label", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e7b942cab089ae913cd54c73dd589a95c724146515225", async() => {
                    WriteLiteral("Product Name");
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_LabelTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.LabelTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_LabelTagHelper);
#nullable restore
#line 51 "G:\Core\POSSystemWithInventory\POSSystemWithInventory\Views\SalesInvoice\Index.cshtml"
__Microsoft_AspNetCore_Mvc_TagHelpers_LabelTagHelper.For = ModelExpressionProvider.CreateModelExpression(ViewData, __model => __model.SalesInvoiceDetail.ProductId);

#line default
#line hidden
#nullable disable
                __tagHelperExecutionContext.AddTagHelperAttribute("asp-for", __Microsoft_AspNetCore_Mvc_TagHelpers_LabelTagHelper.For, global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n                                    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("select", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e7b942cab089ae913cd54c73dd589a95c724146516919", async() => {
                    WriteLiteral("\r\n                                        \r\n                                    ");
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.SelectTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper);
#nullable restore
#line 52 "G:\Core\POSSystemWithInventory\POSSystemWithInventory\Views\SalesInvoice\Index.cshtml"
__Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper.For = ModelExpressionProvider.CreateModelExpression(ViewData, __model => __model.SalesInvoiceDetail.ProductId);

#line default
#line hidden
#nullable disable
                __tagHelperExecutionContext.AddTagHelperAttribute("asp-for", __Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper.For, global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
#nullable restore
#line 52 "G:\Core\POSSystemWithInventory\POSSystemWithInventory\Views\SalesInvoice\Index.cshtml"
__Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper.Items = Model.ProductItem;

#line default
#line hidden
#nullable disable
                __tagHelperExecutionContext.AddTagHelperAttribute("asp-items", __Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper.Items, global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n                                    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("span", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e7b942cab089ae913cd54c73dd589a95c724146519166", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_ValidationMessageTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.ValidationMessageTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_ValidationMessageTagHelper);
#nullable restore
#line 55 "G:\Core\POSSystemWithInventory\POSSystemWithInventory\Views\SalesInvoice\Index.cshtml"
__Microsoft_AspNetCore_Mvc_TagHelpers_ValidationMessageTagHelper.For = ModelExpressionProvider.CreateModelExpression(ViewData, __model => __model.SalesInvoiceDetail.ProductId);

#line default
#line hidden
#nullable disable
                __tagHelperExecutionContext.AddTagHelperAttribute("asp-validation-for", __Microsoft_AspNetCore_Mvc_TagHelpers_ValidationMessageTagHelper.For, global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral(@"
                                </div>
                            </div>
                            <div class=""col-md-4"">
                                <div class=""form-group"" style=""margin-top: 22px;"">
                                    <button type=""button"" id=""salesInvoiceAddBtn"" class=""btn btn-success btn-sm"">Add</button>
                                </div>
                            </div>
                        </div>
                        <div class=""row table-responsive"">
                            <table class=""table table-bordered table-hover"" id=""salesInvoiceTable"">
                                <thead>
                                    <tr style=""background-color: #9999ff; font-weight:900; color:black; text-align:center;"">
                                        <th>Name</th>
                                        <th>Quantity</th>
                                        <th>Unit Price</th>
                                        <th>Price</th>
                ");
                WriteLiteral(@"                        <th>Action</th>
                                    </tr>
                                </thead>
                                <tbody id=""salesInvoiceTBody"">
                                </tbody>
                                <tfoot>
                                    <tr style=""background-color: #9999ff;font-weight: 900;color: black;"">
                                        <td colspan=""3"" align=""right"">Sub total</td>
                                        <td id=""subTotal"" align=""right""></td>
                                        <td></td>
                                    </tr>
                                    <tr style=""font-weight: 900;color: black;"">
                                        <td colspan=""3"" align=""right"">Discount</td>
                                        <td id=""discount"">
                                            <div class=""input-group"">
                                                <div class=""input-group-prepend"">
     ");
                WriteLiteral(@"                                           </div>
                                                <input type=""number"" class=""form-control rightAlign"" id=""discountAmount"" >
                                                <div class=""input-group-append"">
                                                    <span class=""input-group-text""><b>%</b></span>
                                                </div>
                                            </div>
                                        </td>
                                        <td>
                                            ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("select", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e7b942cab089ae913cd54c73dd589a95c724146523616", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.SelectTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
#nullable restore
#line 96 "G:\Core\POSSystemWithInventory\POSSystemWithInventory\Views\SalesInvoice\Index.cshtml"
__Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper.For = ModelExpressionProvider.CreateModelExpression(ViewData, __model => __model.VatAndTaxId);

#line default
#line hidden
#nullable disable
                __tagHelperExecutionContext.AddTagHelperAttribute("asp-for", __Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper.For, global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
#nullable restore
#line 96 "G:\Core\POSSystemWithInventory\POSSystemWithInventory\Views\SalesInvoice\Index.cshtml"
__Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper.Items = Model.VatItem;

#line default
#line hidden
#nullable disable
                __tagHelperExecutionContext.AddTagHelperAttribute("asp-items", __Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper.Items, global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral(@"
                                        </td>
                                    </tr>
                                    <tr style=""font-weight: 900;color: black;"">
                                        <td colspan=""3"" align=""right"">Grand total</td>
                                        <td id=""grandTotal"" align=""right""></td>
                                        <td align=""center"">
                                            <input type=""checkbox"" id=""bonusPoint""> Use Bonus Point
                                        </td>
                                    </tr>
                                    <tr style=""font-weight: 900;color: black;"">
                                        <td colspan=""3"" align=""right"">Paid Amount</td>
                                        <td><input type=""number"" class=""form-control rightAlign"" id=""paidAmount"" /></td>
                                        <td>
                                            <select class=""form-control"" id=""paymentMode"">
 ");
                WriteLiteral("                                               ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e7b942cab089ae913cd54c73dd589a95c724146526818", async() => {
                    WriteLiteral("Cash");
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_4.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_4);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n                                                ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e7b942cab089ae913cd54c73dd589a95c724146528088", async() => {
                    WriteLiteral("Card");
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_5.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_5);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n                                                ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e7b942cab089ae913cd54c73dd589a95c724146529358", async() => {
                    WriteLiteral("Mobile Banking");
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_6.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_6);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral(@"
                                            </select>
                                        </td>
                                    </tr>
                                    <tr style=""font-weight: 900; color: black;"">
                                        <td colspan=""3"" align=""right"">Dues</td>
                                        <td id=""dues"" align=""right""></td>
                                        <td></td>
                                    </tr>
                                </tfoot>
                            </table>
                        </div>
                    </div>
                </div>
                <div class=""modal-footer"">
                    <button type=""button"" class=""btn btn-secondary pull-right"" id=""salesInvoiceResetBtn"">Reset</button>
                    <button type=""button"" id=""salesInvoiceCreateBtn"" class=""btn btn-primary"">Save</button>
                </div>
            </div>
        ");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_7);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_8);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n    </div>\r\n</div>\r\n\r\n");
            DefineSection("Scripts", async() => {
                WriteLiteral(@" 
<script>

    (function () {
        let ajaxOperation = new AjaxOperation();
        let selector = {
            invoiceNumber: $(""#invoiceNumber""),
            customerId: $(""#CustomerId""),
            salesInvoiceResetBtn: $(""#salesInvoiceResetBtn""),
            salesInvoiceCreateBtn: $(""#salesInvoiceCreateBtn""),
            salesInvoiceResetBtn: $(""#salesInvoiceResetBtn""),
            salesInvoiceAddBtn: $(""#salesInvoiceAddBtn""),
            productId: $(""#SalesInvoiceDetail_ProductId""),
            salesInvoiceTBody: $(""#salesInvoiceTBody""),
            subTotal: $(""#subTotal""),
            discountAmount: $(""#discountAmount""),
            vatAndTaxId: $(""#VatAndTaxId""),
            grandTotal: $(""#grandTotal""),
            paidAmount: $(""#paidAmount""),
            dues: $(""#dues""),
            paymentMode: $(""#paymentMode""),
            bonusPoint: $(""#bonusPoint""),


            productInfo: "".productInfo"",
            decrementQuantity: "".decrementQuantity"",
            qu");
                WriteLiteral(@"antityInfo: "".quantityInfo"",
            incrementQuantity: "".incrementQuantity"",
            unitPriceInfo: "".unitPriceInfo"",
            priceInfo: "".priceInfo"",
            deleteRow: "".deleteRow"",



            productStorage: [],
            inventoryStorage: [],
            bonusPointStorage: [],
            serialNumber: 1,
            rowId : 1,
        };

        class OnloadProcess{
            constructor() { }
            GetInvoiceNumber() {
                let invoiceNumber = ajaxOperation.GetAjax(""SalesInvoice/GetInvoiceNumber/"");
                selector.invoiceNumber.text(invoiceNumber);
            }
            GetAvailableQuantity() {
                selector.inventoryStorage = ajaxOperation.GetAjax(""SalesInvoice/GetInventory"");
            }
            GetCustomerBonusPoint() {
                selector.bonusPointStorage = ajaxOperation.GetAjax(""User/GetBonusPoint"");
            }
        }
        class SalesInvoiceDetail {
            constructor(InvoiceNu");
                WriteLiteral(@"mber, ProductId, Quantity, UnitPrice, Price) {
                this.InvoiceNumber = InvoiceNumber;
                this.ProductId = ProductId;
                this.Quantity = Quantity;
                this.UnitPrice = UnitPrice;
                this.Price = Price;
            }
        }

        class Process{
            constructor() { }
            AddEntryColumn(productName, productId, quantity, unitPrice, price) {
                selector.productStorage.push(productId);

                let data = `<tr id = ""rowId${selector.rowId}"">
                            <td> <a class=""productInfo"" productId=""${productId}"" serialNumber=""${selector.serialNumber}"">${productName}</a> </td>
                            
                            <td>
                                <div class=""input-group"">
                                    <div class=""input-group-prepend"">
                                        <button class=""btn btn-danger btn-sm decrementQuantity"" tittle = ""Decrement"" produc");
                WriteLiteral(@"tId=""${productId}"" unitPrice = ""${unitPrice}"" serialNumber=""${selector.serialNumber}"" type=""button""><i class=""fa fa-minus-circle""></i></button>
                                    </div>
                                    <input type=""number"" class=""form-control quantityInfo"" style = ""text-align: center;"" unitPrice = ""${unitPrice}"" productId=""${productId}"" serialNumber=""${selector.serialNumber}"" value=""${quantity}"">
                                    <div class=""input-group-append"">
                                        <button class=""btn btn-success btn-sm incrementQuantity"" tittle = ""Increment"" productId=""${productId}"" unitPrice = ""${unitPrice}"" serialNumber=""${selector.serialNumber}"" type=""button""><i class=""fa fa-plus-circle""></i></button>
                                    </div>
                                </div>
                            </td>

                            <td>
                                <div class=""input-group"">
                                    <input type=");
                WriteLiteral(@"""text"" class=""form-control unitPriceInfo rightAlign"" style = ""border:none;"" serialNumber=""${selector.serialNumber}"" value=""${unitPrice}"" readonly>
                                </div>
                            </td>
                            <td>
                                <div class=""input-group"">
                                    <input type=""text"" class=""form-control priceInfo rightAlign"" style = ""border:none;"" serialNumber=""${selector.serialNumber}"" value=""${price}"" readonly>
                                </div>
                            </td>
                            <td>
                                <div class=""input-group"" style = ""align:center;"">
                                    <button class=""btn btn-danger btn-sm deleteRow"" rowId=""rowId${selector.rowId}"" serialNumber=""${selector.serialNumber}""><i class=""fa fa-trash-alt""></i></button>
                                </div>
                            </td>
                    </tr>`;
                selector.se");
                WriteLiteral(@"rialNumber++;
                selector.rowId++;
                return data;
            }
            InventorySearch(inventoryStorage, productId) {
                let index = inventoryStorage.findIndex(item => item.productId === Number(productId));
                return inventoryStorage[index];
            }
            ProductSearch(productStorage, productId) {
                let index = productStorage.findIndex(item => item === productId);
                return index === -1 ? false : true;
            }
            CalculateSum(className) {
                let value = 0;
                $(className).each(function () {
                    value += Number($(this).val());
                });
                return value;
            }
            VatAndTax() {
                let text = selector.vatAndTaxId.children(""option"").filter("":selected"").text();
                let vat = text.split(""|"");
                return Number(vat[1]);
            }
            CalculateDiscount(pri");
                WriteLiteral(@"ce, discount) {
                let decrement = (price / 100) * discount;
                return (price - decrement);
            }
            CalculateVat(price, vatAndTax) {
                let addingVat = (price / 100) * vatAndTax;
                return (price + addingVat);
            }
            MultipleTask() {
                let priceInfo = this.CalculateSum(selector.priceInfo);
                let discountAmount = selector.discountAmount.val() === """" ? 0 : selector.discountAmount.val();
                let vatAndTax = this.VatAndTax();
                let afterDiscount = this.CalculateDiscount(priceInfo, discountAmount);
                let afterAddingVat = this.CalculateVat(afterDiscount, vatAndTax);
                selector.subTotal.text(priceInfo.toFixed(2));
                selector.grandTotal.text(afterAddingVat.toFixed(2));
                selector.paidAmount.val(afterAddingVat.toFixed(2));
                selector.dues.text(0);
            }
            SetValue(classNam");
                WriteLiteral(@"e, serialNumber, value) {
                $(className).each(function () {
                    if ($(this).attr(""serialNumber"") === serialNumber)
                        $(this).val(value);
                });
            }
            GetCurrentValue(className, serialNumber) {
                let value;
                $(className).each(function () {
                    if ($(this).attr(""serialNumber"") === serialNumber)
                        value = $(this).val();
                });
                return value;
            }
            GetAvailableQuantity(inventoryStorage, productId) {
                let index = inventoryStorage.findIndex(item => item.productId === Number(productId));
                return inventoryStorage[index];
            }
            DecrementQuantity(quantity, productId, serialNumber, unitPrice) {
                let price = quantity * unitPrice;
                this.SetValue(selector.priceInfo, serialNumber, price.toFixed(2));
                this.Multiple");
                WriteLiteral(@"Task();
            }
            IncrementQuantity(quantity, productId, serialNumber, unitPrice) {
                let price = quantity * unitPrice;
                this.SetValue(selector.priceInfo, serialNumber, price.toFixed(2));
                this.MultipleTask();
            }
            DeleteRow(deleteId) {
                let selfThis = this;
                let htmlData = """";
                selector.productStorage = [];
                $(""#salesInvoiceTBody tr"").each(function (i, row) {
                    let rowId = row.id;
                    let productName = $(this).find(""td .productInfo"").text();
                    let productId = $(this).find(""td .productInfo"").attr(""productId"");
                    let quantityInfo = $(this).find(""td .quantityInfo"").val();
                    let unitPrice = $(this).find(""td .unitPriceInfo"").val();
                    let price = $(this).find(""td .priceInfo"").val();
                    if (rowId != deleteId) {
                        ht");
                WriteLiteral(@"mlData += selfThis.AddEntryColumn(productName, productId, quantityInfo, unitPrice, price);
                    }
                    
                });
                selector.salesInvoiceTBody.html(htmlData);
                selfThis.MultipleTask();
            }
            IterateOverRow() {
                let salesInvoiceList = [];
                $(""#salesInvoiceTBody tr"").each(function (i, row) {
                    let invoiceNumber = selector.invoiceNumber.text();
                    let productName = $(this).find(""td .productInfo"").text();
                    let productId = $(this).find(""td .productInfo"").attr(""productId"");
                    let quantityInfo = $(this).find(""td .quantityInfo"").val();
                    let unitPrice = $(this).find(""td .unitPriceInfo"").val();
                    let price = $(this).find(""td .priceInfo"").val();
                    let obj = new SalesInvoiceDetail(invoiceNumber, productId, quantityInfo, unitPrice, price);
                    sale");
                WriteLiteral(@"sInvoiceList.push(obj);
                });
                return salesInvoiceList;
            }
            MakeJsonData() {
                let jsonData = {
                    InvoiceNumber: selector.invoiceNumber.text(),
                    CustomerId: selector.customerId.val(),
                    SubTotal: selector.subTotal.text(),
                    Discount: selector.discountAmount.val(),
                    GrandTotal: selector.grandTotal.text(),
                    PaidAmount: selector.paidAmount.val(),
                    Dues: selector.dues.text(),
                    PaymentMode: selector.paymentMode.val(),
                    VatAndTaxId: selector.vatAndTaxId.val(),
                    IsBonusPointTaken: selector.bonusPoint.is("":checked"") ? true : false,
                    SalesInvoiceDetails: this.IterateOverRow(),
                }
                return jsonData;
            }
            ResetAll() {
                selector.salesInvoiceTBody.html("""");
             ");
                WriteLiteral(@"   $("".form-control"").val('');
                selector.subTotal.text("""");
                selector.grandTotal.text("""");
                selector.productStorage = [];
                
            }
            BonusPoint() {
                let customerId = selector.customerId.val();
                let item = selector.bonusPointStorage.find(x => x.id === Number(customerId));
                return item.bonusPoint;
            }
        }
        let onloadProcess = new OnloadProcess();
        let process = new Process();
        window.onload = function () {
            onloadProcess.GetInvoiceNumber();
            onloadProcess.GetAvailableQuantity();
            onloadProcess.GetCustomerBonusPoint();
        }

        selector.salesInvoiceAddBtn.click(function () {
            let productId = selector.productId.val();
            let productName = $(""#SalesInvoiceDetail_ProductId option:selected"").text();
            if (productId != """") {

                let productInfo = proce");
                WriteLiteral(@"ss.InventorySearch(selector.inventoryStorage, productId);
                if (productInfo.availableQuantity > 0 && productInfo != null) {
                    if (selector.productStorage.length === 0) {
                        let data = process.AddEntryColumn(productName, productId, 1, productInfo.sellPrice.toFixed(2), productInfo.sellPrice.toFixed(2));
                        selector.salesInvoiceTBody.append(data);
                        process.MultipleTask();
                    }
                    else if (process.ProductSearch(selector.productStorage, productId) === false) {
                        let data = process.AddEntryColumn(productName, productId, 1, productInfo.sellPrice.toFixed(2), productInfo.sellPrice.toFixed(2));
                        let rowCount = selector.salesInvoiceTBody.find(""tr"").length;
                        rowCount > 0 ? $(""#salesInvoiceTBody tr:first"").before(data) : selector.salesInvoiceTBody.append(data);
                        process.MultipleTask();
      ");
                WriteLiteral(@"              }
                    else {
                        toastr.error(""Already Taken!"", ""Error"");
                    }
                    
                }
                else {
                    toastr.error(""Out of Stock!"", ""Error"");
                }
            }
            else {
                toastr.error(""Select a Product!"", ""Error"");
            }
            
        });

        $(document).on(""click"", selector.decrementQuantity, function () {
            let productId = $(this).attr(""productId"");
            let serialNumber = $(this).attr(""serialNumber"");
            let unitPrice = $(this).attr(""unitPrice"");
            let quantity = process.GetCurrentValue(selector.quantityInfo, serialNumber);
            if (quantity > 1) {
                process.SetValue(selector.quantityInfo, serialNumber, quantity - 1);
                process.DecrementQuantity(quantity - 1, productId, serialNumber, unitPrice);
            }
            else {
                to");
                WriteLiteral(@"astr.error(""Quantity is underflow!"", ""Error"");
            }
        });

        $(document).on(""click"", selector.incrementQuantity, function () {
            let productId = $(this).attr(""productId"");
            let serialNumber = $(this).attr(""serialNumber"");
            let unitPrice = $(this).attr(""unitPrice"");
            let quantity = process.GetCurrentValue(selector.quantityInfo, serialNumber);
            let availableQuantity = process.GetAvailableQuantity(selector.inventoryStorage, productId);
            if (quantity < availableQuantity.availableQuantity) {
                process.SetValue(selector.quantityInfo, serialNumber, Number(quantity) + 1);
                process.IncrementQuantity(Number(quantity)+ 1, productId, serialNumber, unitPrice);
            }
            else {
                toastr.error(""Quantity is Overflow!"", ""Error"");
            }
        });

        $(document).on(""change"", selector.quantityInfo, function () {
            let quantity = Number($(thi");
                WriteLiteral(@"s).val());
            if (quantity < 1) {
                $(this).val(1);
                process.MultipleTask();
            }
            else {
                let productId = $(this).attr(""productId"");
                let serialNumber = $(this).attr(""serialNumber"");
                let unitPrice = $(this).attr(""unitPrice"");
                let availableQuantity = process.GetAvailableQuantity(selector.inventoryStorage, productId);
                if (Number(quantity) <= Number(availableQuantity.availableQuantity)) {
                    process.SetValue(selector.priceInfo, serialNumber, unitPrice * quantity);
                    process.MultipleTask();
                }
                else {
                    $(this).val(1);
                    process.MultipleTask();
                    toastr.error(""Quantity is Overflow!"", ""Error"");
                }
            }
        });

        $(document).on(""click"", selector.deleteRow, function () {
            let rowId = $(this).attr(");
                WriteLiteral(@"""rowId"");
            let htmlData = process.DeleteRow(rowId);
        });

        selector.discountAmount.keyup(function () {
            process.MultipleTask();
        });
        selector.vatAndTaxId.change(function () {
            process.MultipleTask();
        });

        selector.paidAmount.keyup(function () {
            let paidAmount = Number($(this).val());
            let grandTotal = Number(selector.grandTotal.text());
            if (paidAmount <= grandTotal) {
                selector.dues.text((grandTotal - paidAmount).toFixed(2));
            }
            else {
                process.MultipleTask();
                toastr.error(""Invalid Paid Amount!"", ""Error"");
            }

        });

        selector.salesInvoiceCreateBtn.click(function () {
            if (selector.salesInvoiceTBody.find(""tr"").length > 0) {
                let jsonData = process.MakeJsonData();
                let response = ajaxOperation.SavePostAjax(""/SalesInvoice/Index"", jsonData);
");
                WriteLiteral(@"                if (response) {
                    toastr.success(""Successfully Saved!"", ""Success"");
                    onloadProcess.GetInvoiceNumber();
                    onloadProcess.GetAvailableQuantity();
                    process.ResetAll();
                }
                else {
                    toastr.error(""Something went wrong!"", ""Error"");
                }
            }
            else {
                toastr.error(""No Invoice Found"", ""Error"");
            }
            
        });

        selector.salesInvoiceResetBtn.click(function () {
            process.ResetAll();
        })

        selector.bonusPoint.change(function () {
            if ($(this).is("":checked"")) {
                let bonusPoint = process.BonusPoint();
                let grandTotal = (selector.grandTotal.text() - bonusPoint).toFixed(2)
                selector.grandTotal.text(grandTotal);
                selector.paidAmount.val(grandTotal);
            }
            else {
         ");
                WriteLiteral("       process.MultipleTask();\r\n            }\r\n        });\r\n\r\n    })();\r\n</script>\r\n");
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<POSSystemWithInventory.Models.SalesInvoiceVM> Html { get; private set; }
    }
}
#pragma warning restore 1591
